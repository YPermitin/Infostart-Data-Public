
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // отключаем стандартный вывод отчета - будем выводить программно 		
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();// Получаем настройки отчета  
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; // Создаем данные расшифровки     		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; // Создаем компоновщик макета    	
	// Инициализируем макет компоновки используя схему компоновки данных 
	// и созданные ранее настройки и данные расшифровки
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	// Скомпонуем результат
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	

	// Заполняем рисунки для полей, в данных расшифровки которых находятся элементы справочника 
	// "НоменклатураПрисоединенныеФайлы"
	КоличествоКолонокТаблицы = ДокументРезультат.ШиринаТаблицы; // Количество колонок в отчете
	КоличествоСтрокТаблицы = ДокументРезультат.ВысотаТаблицы; 	// Количество строк в отчете
	// Обходим все ячейки отчета
	Для Кл = 1 По КоличествоКолонокТаблицы Цикл 		
		Для Ст = 1 По КоличествоСтрокТаблицы Цикл  			
			ТекОбласть = ДокументРезультат.Область(Ст, Кл);  
			// Если имеется расшифровка ячейки, то проверям наличие полей расшифровки
			Если ТекОбласть.Расшифровка <> Неопределено Тогда
				ПоляРасшифровки = ДанныеРасшифровки.Элементы[ТекОбласть.Расшифровка].ПолучитьПоля();
				Если ПоляРасшифровки.Количество() > 0 Тогда
					// Если тип значения поля расшифровки соответствует справочнику прикрепленных файлов, то
					// выводим связанную картинку
					Рисунок = ПолучитьИзображение(ПоляРасшифровки.Получить(0).Значение);
					Если Рисунок <> Неопределено Тогда
						Рис = ДокументРезультат.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
						Рис.РазмерКартинки = РазмерКартинки.Пропорционально;
						Рис.Картинка = Рисунок;
						Рис.Расположить(ТекОбласть);						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;  			
		КонецЦикла;  		
	КонецЦикла;
			
КонецПроцедуры

Функция ПолучитьИзображение(ПрисоединенныйФайл)
	
	КартинкаПоумолчанию = Неопределено;
	
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвоичныеДанныеФайлов.ДвоичныеДанныеФайла
		|ИЗ
		|	РегистрСведений.ДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
		|ГДЕ
		|	ДвоичныеДанныеФайлов.Файл = &Файл"; 		
		Запрос.УстановитьПараметр("Файл", ПрисоединенныйФайл); 		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий(); // Получаем двоичные данные катинки
			Возврат Новый Картинка(Выборка.ДвоичныеДанныеФайла.Получить(), Истина);
		Иначе // Если данные отсутствуют, получаем стандартное изображение из 
			  // дополнительного макета внешнего отчета
			Возврат Новый Картинка(ПолучитьМакет("НетКартинки"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат КартинкаПоумолчанию;
	
КонецФункции
