
&НаКлиенте
Процедура Обновить(Команда)
	
	Элементы.Список.Обновить();
	
	ПараметрыИтоги = ПолучитьИтогиДокументов();
	Сумма   = ПараметрыИтоги.Сумма;	
	Рейтинг = ПараметрыИтоги.Рейтинг;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИтогиДокументов()
	
	НастройкиСписка = Список.КомпоновщикНастроек.ПолучитьНастройки();
	СтруктураТиповПолей = ПолучитьСтруктуруТиповПолей(НастройкиСписка.Отбор);
	
	// Получаем массив использованных полей отбора первого уровня
	ЭлементыОтбора = НастройкиСписка.Отбор.Элементы;	
	МассивИспользуемыхПолейОтбора = ПолучитьМассивВключенныхЭлементов(ЭлементыОтбора);
	
	ПараметрыВозврат = Новый Структура;  
	
	// Формируем запрос, аналогичный запросу динамического списка
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументТестовыйДокумент.Ссылка КАК Ссылка,
	|	ДокументТестовыйДокумент.ВерсияДанных,
	|	ДокументТестовыйДокумент.ПометкаУдаления,
	|	ДокументТестовыйДокумент.Номер,
	|	ДокументТестовыйДокумент.Дата,
	|	ДокументТестовыйДокумент.Проведен,
	|	ДокументТестовыйДокумент.Рейтинг,
	|	ДокументТестовыйДокумент.Сумма,
	|	ДокументТестовыйДокумент.Комментарий,
	|	ДокументТестовыйДокумент.МоментВремени,
	|	ВЫБОР
	|		КОГДА ДокументТестовыйДокумент.Рейтинг < 1000
	|			ТОГДА ""Низкий""
	|		КОГДА ДокументТестовыйДокумент.Рейтинг < 2500
	|			ТОГДА ""Средний""
	|		КОГДА ДокументТестовыйДокумент.Рейтинг < 5000
	|			ТОГДА ""Высокий""
	|		ИНАЧЕ ""Рекорд""
	|	КОНЕЦ КАК УровеньРейтинга
	|ПОМЕСТИТЬ ПредварительныеДанные
	|ИЗ
	|	Документ.ТестовыйДокумент КАК ДокументТестовыйДокумент ";
	
	// Устанавливаем условия запроса в соответствии с установленным отбором
	ТекстУсловийЗапроса = "ГДЕ ";
	Для Каждого Эл Из МассивИспользуемыхПолейОтбора Цикл 
		// Обрабатываем текущий элемент отбора верхнего уровня
		ОбработатьЭлементОтбора(Эл, ТекстУсловийЗапроса, "И",
								СтруктураТиповПолей, Запрос, ТекстЗапроса);		
	КонецЦикла;
	ТекстУсловийЗапроса = УбратьЛишнийОператорУсловия(ТекстУсловийЗапроса);
	
	// Добвляем к основному запросу текст условий отбора
	ТекстЗапроса = ТекстЗапроса + ТекстУсловийЗапроса;
	
	// Добавляем к запросу текст получения итогов
	ТекстЗапроса = ТекстЗапроса +
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПредварительныеДанные.Сумма) КАК Сумма,
	|	СРЕДНЕЕ(ПредварительныеДанные.Рейтинг) КАК Рейтинг
	|ИЗ
	|	ПредварительныеДанные КАК ПредварительныеДанные";
	
	// Устанавливаем текст запроса
	Запрос.Текст = ТекстЗапроса;
	
	// Обрабатываем результат
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПараметрыВозврат.Вставить("Сумма", "---");
		ПараметрыВозврат.Вставить("Рейтинг", "---");
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПараметрыВозврат.Вставить("Сумма", Формат(Выборка.Сумма, "ЧДЦ=2; ЧГ=0"));
		ПараметрыВозврат.Вставить("Рейтинг", Формат(Выборка.Рейтинг, "ЧДЦ=2; ЧГ=0"));
	КонецЕсли;
	
	Возврат ПараметрыВозврат;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруТиповПолей(Отбор)
	
	СтруктураТиповПолей = Новый Структура;
	Для Каждого Эл Из Отбор.ДоступныеПоляОтбора.Элементы Цикл
		СтруктураТиповПолей.Вставить(Эл.Поле, Эл.ТипЗначения);
	КонецЦикла;
	Возврат СтруктураТиповПолей;
	
КонецФункции

// Получаем массив полей из коллекции элементов
// с установленным флагом "Использование"
//
&НаСервереБезКонтекста
Функция ПолучитьМассивВключенныхЭлементов(ЭлементыОтбора)
	
	МассивИспользуемыхПолейОтбора = Новый Массив;
	Для Каждого ЭлОтбора Из ЭлементыОтбора Цикл
		Если ЭлОтбора.Использование Тогда
			МассивИспользуемыхПолейОтбора.Добавить(ЭлОтбора);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат МассивИспользуемыхПолейОтбора;
	
КонецФункции

// Убираем лишний оператор логического сравнения из условия в запросе на конце
//
&НаСервереБезКонтекста
Функция УбратьЛишнийОператорУсловия(ТекстЗапроса)
	
	ТекстЗапроса = СокрЛП(ТекстЗапроса);
	
	Длина = СтрДлина(ТекстЗапроса);
	
	Пока Длина <> 0 Цикл
		СимволТекущий = Сред(ТекстЗапроса, Длина, 1);
		Если СимволТекущий = " " Тогда
			Прервать;
		КонецЕсли;
		Длина = Длина - 1;
	КонецЦикла;
	
	Возврат Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-(СтрДлина(ТекстЗапроса)-Длина));
	
КонецФункции

// Процедура обрабатывает переданный элемент отбора
// Параметры:
//	1. Эл - элемент отбора (группа или поле отбора)
//	2. ТекстУсловийЗапроса - строковая переменная, в которую добисываются условия запроса
//	3. ВидСравненияУсловия - вид сравнения в условии (зависит от группы элементов отбора)
//	4. СтруктураТиповПолей - структура, содержащая описание типов полей для полей отбора
//	5. Запрос - класс запроса, который будет в дальнейшем выполнен для получения результата
//	6. ТекстЗапроса - исходный текст запроса динамического списка
//
&НаСервереБезКонтекста
Процедура ОбработатьЭлементОтбора(Эл, ТекстУсловийЗапроса, ВидСравненияУсловияВерхнийУровень, СтруктураТиповПолей, Запрос, ТекстЗапроса) 	
	// Если это группа элементов отбора
	Если ТипЗнч(Эл) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда  		
		ВидСравненияУсловия = "";
		Отрицание = "";
		Если Эл.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
			ВидСравненияУсловия = "И";
		ИначеЕсли Эл.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда 
			ВидСравненияУсловия = "ИЛИ"; 	
		ИначеЕсли Эл.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			ВидСравненияУсловия = "И";
			Отрицание = " НЕ ";
		КонецЕсли;

		ТекстУсловийЗапроса = ТекстУсловийЗапроса + Отрицание +"(";   		
		ЭлементыГруппы = Эл.Элементы;     		
		МассивЭлементовОтбора = ПолучитьМассивВключенныхЭлементов(ЭлементыГруппы);		
		Если МассивЭлементовОтбора.Количество() = 0 Тогда
			ТекстУсловийЗапроса = ТекстУсловийЗапроса + "ИСТИНА"
		Иначе
			Для Каждого ЭлГр Из Эл.Элементы Цикл 				
				Если ЭлГр.Использование Тогда
					ОбработатьЭлементОтбора(ЭлГр, ТекстУсловийЗапроса, ВидСравненияУсловия, СтруктураТиповПолей, Запрос, ТекстЗапроса);			
				КонецЕсли; 				
			КонецЦикла;    			
			ТекстУсловийЗапроса = Лев(ТекстУсловийЗапроса, СтрДлина(ТекстУсловийЗапроса)-(СтрДлина(ВидСравненияУсловия)+1)); 
		КонецЕсли;     				
		ТекстУсловийЗапроса = ТекстУсловийЗапроса + ") " + ВидСравненияУсловияВерхнийУровень;   		
	Иначе // Если это поле отбора              		
		ИмяПоляОтбора = Строка(Эл.ЛевоеЗначение); 		
		ТекстУсловийЗапроса = ТекстУсловийЗапроса
		+ " " +ПолучитьТекстПоляПоПредставлению(ТекстЗапроса, ИмяПоляОтбора) // Получаем текст поля, по которому делается отбор
		        // Получаем выражение сравнения для полученного ранее поля отбора
		+ " " + ПолучитьВидСравненияИЗначение(Эл.ВидСравнения, Эл.ПравоеЗначение, ИмяПоляОтбора, ВидСравненияУсловияВерхнийУровень); 
		// Если "ВидСравнения" - "Заполнено" или "Не заполнено", тогда в условие сравнения подставляем пустое значение для поля отбора по его типу
		Если Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено ИЛИ 
			Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда  			
			Запрос.УстановитьПараметр("Заполнено"+ИмяПоляОтбора, 
								СтруктураТиповПолей[СтрЗаменить(ИмяПоляОтбора, "Заполнено", "")].ПривестиЗначение());    			
		Иначе // Иначе устанавливаем значение параметра в соответствии с переданным значением      			
						                                         // Получаем значение для передачи в запрос параметром
			Запрос.УстановитьПараметр(СтрЗаменить(ИмяПоляОтбора, ".", ""), ПолучитьЗначениеДляПараметра(Эл.ПравоеЗначение, ИмяПоляОтбора));				
		КонецЕсли;
	КонецЕсли;   	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеДляПараметра(ЗначениеОтбора, ИмяПоляОтбора)
	
	// Для стандартной даты начала получаем значение непосредственно даты
	Если ТипЗнч(ЗначениеОтбора) = Тип("СтандартнаяДатаНачала") Тогда
		Возврат ЗначениеОтбора.Дата;	
	Иначе
		Возврат ЗначениеОтбора; // иначе возвращаем исходное значение отбора
	КонецЕсли;
	
КонецФункции

// Функция получает текст поля запроса из непосредственно текста запроса
// Поиск осуществляется по представлению поля. 
// Актуально для полей из составных выражений.
//
&НаСервереБезКонтекста
Функция ПолучитьТекстПоляПоПредставлению(ТекстЗапроса, ИмяПредставленияПоля)
	
	ПозицияНайденная = Найти(ТекстЗапроса, "КАК " + ИмяПредставленияПоля);
	Если ПозицияНайденная = 0 Тогда
		Возврат ИмяПредставленияПоля;
	Иначе
		НачалоЦикла = ПозицияНайденная - 1;
		ТекстЗапросаДляПоиска = Лев(ТекстЗапроса, НачалоЦикла);
		
		ПозицияНачалоПоля = 0;
		Пока НачалоЦикла <> 0 Цикл
			Если Сред(ТекстЗапросаДляПоиска, НачалоЦикла, 1) = "," Тогда
				ПозицияНачалоПоля = НачалоЦикла+1;	
				Прервать;
			КонецЕсли;
			НачалоЦикла = НачалоЦикла - 1;
		КонецЦикла;
		Если ПозицияНачалоПоля = 0 Тогда
			ПозицияНачалоПоля = Найти(ТекстЗапросаДляПоиска, "ВЫБРАТЬ");
			Если ПозицияНачалоПоля <> 0 Тогда
				ПозицияНачалоПоля = ПозицияНачалоПоля + 7;
			Иначе
				Возврат ИмяПредставленияПоля;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Сред(ТекстЗапросаДляПоиска, ПозицияНачалоПоля, ПозицияНайденная-ПозицияНачалоПоля);	
	КонецЕсли;
	
КонецФункции

// Получаем вид сравнения по имени поля и значению отбора, а также виду сравнения в сусловии
// Параметры:
//	1. ВидСравненияОтбор - вид сравнения в поле отбора (тип "ВидСравненияКомпоновкиДанных")
//	2. ЗначениеСравнения - ПравоеЗначение из элемента отбора
//	3. ИмяПоляОтбора - имя поля в отборе
//	4. ВидСравненияУсловия - вид сравнения условия в зависимости от текущей родительской 
// группы элементов в отборе (корневая группа - условие "И")
//
&НаСервереБезКонтекста
Функция ПолучитьВидСравненияИЗначение(ВидСравненияОтбор, ЗначениеСравнения,
												ИмяПоляОтбора, ВидСравненияУсловия)
	
	ДопИмя = СтрЗаменить(Строка(ВидСравненияОтбор), " ", "");
	ИмяПоляОтбора = СтрЗаменить(ИмяПоляОтбора, ".", "")+ДопИмя;
	
	Если ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Равно Тогда
		Возврат "= &" + ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Возврат "<> &" + ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Возврат "В ИЕРАРХИИ (&" + ИмяПоляОтбора + ") "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ (&" + ИмяПоляОтбора + ") "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Возврат "< &" + ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Возврат "<= &" + ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат "> &" + ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Возврат ">= &" + ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Возврат "В (&" + ИмяПоляОтбора + ") "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Возврат "НЕ В (&" + ИмяПоляОтбора + ") "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Содержит Тогда
		Возврат "ПОДОБНО (""%" + ЗначениеСравнения + "%"") "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Возврат "НЕ ПОДОБНО (""%" + ЗначениеСравнения + "%"") "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Возврат "<> &" + "Заполнено"+ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	ИначеЕсли ВидСравненияОтбор = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		Возврат "= &" + "Заполнено"+ИмяПоляОтбора + " "+ВидСравненияУсловия+" ";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьНовогоДокумента" Тогда
		Обновить(Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Обновить(Неопределено);
	
КонецПроцедуры
