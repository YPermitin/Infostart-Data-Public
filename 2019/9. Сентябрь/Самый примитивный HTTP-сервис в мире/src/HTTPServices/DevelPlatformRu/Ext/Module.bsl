
Функция ProductsGetProducts(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Обрабатываем присланный текст запроса для поиска номенклатуры
	ТекстПоискаНоменклатуры = "";
	Попытка
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку("UTF-8");
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
		ИмяСвойства = Неопределено;
		ЗначениеСвойства = Неопределено;
		Пока ЧтениеJSON.Прочитать()
			И (ИмяСвойства = Неопределено ИЛИ ЗначениеСвойства = Неопределено) Цикл
			Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
				// Начинаем обрабатывать объект со строкой запроса	
			ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
				ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
				ЗначениеСвойства = ЧтениеJSON.ТекущееЗначение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		// Если при обработке возникает ошибка, то считем, что отбор не был установлен	
	КонецПопытки;
	Если ИмяСвойства = "query"
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстПоискаНоменклатуры = Строка(ЗначениеСвойства);	
	КонецЕсли;
	
	// Получаем список номенклатуры для отправки на страницу в формате JSON
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.Код,
		|	Номенклатура.Наименование,
		|	Номенклатура.Артикул,
		|	Номенклатура.ПолноеНаименование,
		|	Номенклатура.Описание
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование ПОДОБНО &Наименование"; 	
	Запрос.УстановитьПараметр("Наименование", "%"+ТекстПоискаНоменклатуры+"%");	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
		
	Попытка
		ВремФайл = ПолучитьИмяВременногоФайла("json");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(ВремФайл, "UTF-8");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Пока Выборка.Следующий() Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ЗаписьJSON.ЗаписатьИмяСвойства("GUID");
			ЗаписьJSON.ЗаписатьЗначение(Строка(Выборка.Ссылка.УникальныйИдентификатор()));
					
			ЗаписьJSON.ЗаписатьИмяСвойства("Name");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(Выборка.Наименование));
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.Закрыть();
		
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ВремФайл, "UTF-8");
		СтрокаJSON = Текст.ПолучитьТекст();
	Исключение
		СтрокаJSON = "Ошибка: " + ОписаниеОшибки();
	КонецПопытки;
	
	Ответ.УстановитьТелоИзДвоичныхДанных(Новый ДвоичныеДанные(ВремФайл));
	
	Попытка
		УдалитьФайлы(ВремФайл);
	Исключение
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция Infoget(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Обрабатываем присланный в теле запроса GUID товара
	ТекстGUID = "";
	Попытка
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку("UTF-8");
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
		ИмяСвойства = Неопределено;
		ЗначениеСвойства = Неопределено;
		Пока ЧтениеJSON.Прочитать()
			И (ИмяСвойства = Неопределено ИЛИ ЗначениеСвойства = Неопределено) Цикл
			Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
				// Начинаем обрабатывать объект со строкой запроса	
			ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
				ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
				ЗначениеСвойства = ЧтениеJSON.ТекущееЗначение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		// Если при обработке возникает ошибка, то считем, что отбор не был установлен	
	КонецПопытки;
	Если ИмяСвойства = "GUID"
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстGUID = Строка(ЗначениеСвойства);	
	КонецЕсли;
	
	СтрокаJSON = "{ }";
	НоменклатураGUID = Неопределено;
	Попытка
		НоменклатураGUID = Новый УникальныйИдентификатор(ТекстGUID);		
	Исключение 
	КонецПопытки;
	
	// Если GUID корректный, то формируем ответ в формате JSON со значениями 
	// реквизитов номенклатуры
	Если ЗначениеЗаполнено(НоменклатураGUID) Тогда
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(НоменклатураGUID);	
		Попытка
			ВремФайл = ПолучитьИмяВременногоФайла("json");
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.ОткрытьФайл(ВремФайл, "UTF-8");
			ЗаписьJSON.ЗаписатьНачалоМассива();
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ЗаписьJSON.ЗаписатьИмяСвойства("Art");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(Номенклатура.Артикул));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("FullName");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(Номенклатура.ПолноеНаименование));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("Code");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(Номенклатура.Код));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("Descr");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(Номенклатура.Описание));
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
			ЗаписьJSON.ЗаписатьКонецМассива();
			ЗаписьJSON.УстановитьСтроку();
			ЗаписьJSON.Закрыть();
			
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ВремФайл, "UTF-8");
			СтрокаJSON = Текст.ПолучитьТекст();
			Ответ.УстановитьТелоИзДвоичныхДанных(Новый ДвоичныеДанные(ВремФайл));
		Исключение
			Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
		КонецПопытки;
	Иначе
		Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция MainPageget(Запрос)
	
	МакетСтраницыПоиска = ПолучитьОбщийМакет("ГлавнаяСтраница");
	
	Ответ = Новый HTTPСервисОтвет(200);
	// Для корректного отображения веб-страницы установим тип содержимого как HTML
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	

	// Получаем исходный код страницы и делаем подмену имени сервера
	// в ссылках на методы HTTP-сервиса, чтобы AJAX-запросы отработали
	// корректно
	ТекстСтраницы = МакетСтраницыПоиска.ПолучитьТекст();
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "localhost", Константы.ИмяСервера.Получить());
	
	Ответ.УстановитьТелоИзСтроки(ТекстСтраницы);
	
	Возврат Ответ;
	
КонецФункции
